/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */


var State = null;
if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
  State = require('./browser.js');
} else {
  State = require('./node.js');
}
const stateHelper = new State();
stateHelper.init();

/**
* Create a debugger with the given `namespace`.
*
* @param {String} namespace
* @return {Function}
* @api public
*/
function createDebug(namespace) {
  let prevTime;

  var existedDebug = stateHelper.instances.find(it => {
    return it.namespace === namespace;
  });
  if (existedDebug) {
    return existedDebug;
  }

  function debug(...args) {
    // Disabled?
    if (!debug.enabled) {
      return;
    }

    const self = debug;

    const curr = Number(new Date());
    const ms = curr - (prevTime || curr);
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    args[0] = stateHelper.coerce(args[0]);

    if (typeof args[0] !== 'string') {
      // Anything else let's inspect with %O
      args.unshift('%O');
    }

    // Apply any `formatters` transformations
    let index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
      // If we encounter an escaped % then don't increase the array index
      if (match === '%%') {
        return match;
      }
      index++;
      const formatter = stateHelper.formatters[format];
      if (typeof formatter === 'function') {
        const val = args[index];
        match = formatter.call(self, val);

        // Now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // Apply env-specific formatting (colors, etc.)
    stateHelper.formatArgs(args, {
      namespace: debug.namespace,
      color: debug.color
    });

    const logFn = self.log || stateHelper.log.bind(stateHelper);
    logFn(args, {
      namespace: debug.namespace
    });
  }

  debug.namespace = namespace;
  debug.enabled = stateHelper.enabled(namespace);
  debug.color = stateHelper.selectColor(namespace);
  debug.destroy = function destroy() {
    const index = stateHelper.instances.indexOf(this);
    if (index !== -1) {
      stateHelper.instances.splice(index, 1);
      this.enabled = false;
      return true;
    }
    return false;
  };

  stateHelper.instances.push(debug);

  return debug;
}

createDebug.getState = function() {
  return stateHelper;
}

module.exports = createDebug;
