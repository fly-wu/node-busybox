/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
const Common = require('./common.js');


module.exports = class State extends Common {
  constructor() {
    super();
    /**
     * Colors.
     */
    this.prefixColor = '#808080';
    this.colors = [
      '#800080', '#FF00FF', '#000080', '#0000FF', '#008080',
      '#008000', '#00FFFF', '#00FF00', '#808000', '#800000', '#FF0000',
      '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333',
      '#0099CC', '#00CC00', '#00CC33', '#00CC66', '#00CC99',
      '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF',
      '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33',
      '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF',
      '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF',
      '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
      '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333',
      '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633',
      '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033',
      '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633',
      '#FF9900', '#FF9933', '#FFCC00', '#FFCC33',
    ];
    this.config = {};

    var config = {};
    var debug = false;
    try {
      debug = this.localstorage().getItem('debug');
    } catch (error) {
      debug = false;
      // Swallow
    }
    config['debug'] = debug;
    config['useColors'] = this.useColors();

    this.formatters = {
      /**
       * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
       */
      j(v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return '[UnexpectedJSONParseError]: ' + error.message;
        }
      }
    }

    config = Object.assign({}, this.defaultConfig, config);
    for (let key in config) {
      this.setConfig(key, config[key]);
    }
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */
  getConfig() {
    return this.config;
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */
  setConfig(key, value) {
    switch (key) {
      case 'debug':
        this.config[key] = value;
        if (value) {
          this.localstorage().setItem('debug', value);
        } else {
          this.localstorage().removeItem('debug');
        }
        this.enable(value);
        break;
      default:
        if (this.defaultConfig.hasOwnProperty(key)) {
          this.config[key] = value;
        }
        break;
    }
  }

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */
  useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
      return true;
    }

    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }

    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
      // Is firebug? http://stackoverflow.com/a/398120/376773
      (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
      // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
      // Double check webkit in userAgent just in case we are in a worker
      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */
  localstorage() {
    try {
      // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
      // The Browser also has localStorage in the global context.
      return localStorage;
    } catch (error) {
      return {
        setItem: () => {},
        removeItem: () => {}
      }
      // Swallow
      // XXX (@Qix-) should we be logging these?
    }
  }

  formatArgs(args, {
    namespace = '',
    color = '#000000'
  }) {
    const time = this.formatDate(Date.now(), 'hh:mm:ss.SSS');
    if (!this.config.useColors) {
      args[0] = `${time} ${namespace} ${args[0]}`
      return;
    }
    args[0] = `%c${time}%c %c${namespace}%c ${args[0]}`
    args.splice(1, 0, `color: ${this.prefixColor}`, 'color: inherit', `color: ${color}`, 'color: inherit');
  }

  get log() {
    return console.debug || console.log || (() => {});
  }
}

