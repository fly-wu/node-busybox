/**
 * Module dependencies.
 */
const fs = require('fs');
const tty = require('tty');
const util = require('util');
const Common = require('./common.js');

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

module.exports = class State extends Common {
  constructor() {
    super();
    this.prefixColor = 240;
    this.colors = [1, 2, 3, 4, 5, 6, 9, 12, 13, 14, 21,
              28, 34, 39, 40, 52, 58, 88, 124, 129,
              130, 160, 164, 166, 171, 196, 197, 198, 201, 202, 203, 208, 210,
              214];
    // $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
    const config = Object.keys(process.env).filter(key => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      // Camel-case
      const prop = key
        .substring(6)
        .toLowerCase()
        .replace(/_([a-z])/g, (_, k) => {
          return k.toUpperCase();
        });

      // Coerce string value into JS value
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === 'null') {
        val = null;
      } else {
        val = Number(val);
      }

      obj[prop] = val;
      return obj;
    }, {
      debug: process.env.debug || process.env.DEBUG
    });
    
    if (!config.hasOwnProperty('useColors')) {
      config.useColors = tty.isatty(process.stderr.fd);
    }

    this.config = Object.assign({}, this.defaultConfig, config);
    
    this.formatters = {
      /**
       * Map %o to `util.inspect()`, all on a single line.
       */
      o(v) {
        return util.inspect(v, {
          colors: config.colors
        }).replace(/\s*\n\s*/g, ' ');
      },
      /**
       * Map %O to `util.inspect()`, allowing multiple lines if needed.
       */
      O(v) {
        return util.inspect(v, {
          colors: config.colors
        });
      }
    };
  }
  /**
   * Load `namespaces`.
   *
   * @return {Object} returns user config
   * @api private
   */
  getConfig() {
    return this.config;
  }
  setConfig(key, value) {
    switch (key) {
      case 'debug':
        this.config[key] = value;
        if (value) {
          process.env.DEBUG = value;
        } else {
          // If you set a process.env field to null or undefined, it gets cast to the
          // string 'null' or 'undefined'. Just delete instead.
          delete process.env.DEBUG;
        }
        break;
      default:
        if (this.config.hasOwnProperty(key)) {
          this.config[key] = value;
        }
        break;
    }
  }

  colorWrapper(code) {
    return [`\u001B[38;5;${code}m`, '\u001B[0m'];
  }

  formatArgs(args, {
    namespace = '',
    color = 240
  }) {
    // remove '\n' at end of line, to avoid blank line after split('\n')
    args[0] = args[0].replace(/[\n]* *$/, '');
    const time = this.formatDate(Date.now(), 'hh:mm:ss.SSS');
    // formatDate
    if (this.config.useColors) {
      const prefix = `${this.colorWrapper(this.prefixColor)[0]}${time}${this.colorWrapper(this.prefixColor)[1]} ` + `${this.colorWrapper(color)[0]}${namespace}${this.colorWrapper(color)[1]} `;
      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    } else {
      const prefix = `${time} ` + `${namespace} `;
      args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    }
  }

  /**
   * Invokes `util.format()` with the specified arguments and writes to stderr.
   */
  log(args, {
    namespace = ''
  }) {
    if (this.config.toFile) {
      var filePath = `${this.config.toFile}.${this.formatDate(Date.now(), 'yyyy-MM-dd')}.log`;
      var line = args[0];
      line = line + '\n';
      fs.existsSync(filePath) ?
        fs.appendFile(filePath, line, function() {}) :
        fs.writeFileSync(filePath, line);
    } else {
      return process.stderr.write(util.format(...args) + '\n');
    }
  }
}
