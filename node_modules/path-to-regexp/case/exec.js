var pathToRegexp = require('path-to-regexp');

var Demo = function() {}
Demo.prototype = {
  test1() {
    var keys = []
    var re = pathToRegexp('/foo/:bar', keys);
    console.log(re);
    console.log(keys);
    console.log(re.exec('/foo/route'));
  },
  
  // Named parameters are defined by prefixing a colon to the parameter name (:foo)
  test2() {
    var keys = [];
    var re = pathToRegexp('/:foo/:bar', keys)
    console.log(re);
    console.log(keys);
    console.log(re.exec('/test/route/'));
  },

  // Parameters can be suffixed with a question mark (?) to make the parameter optional.
  test3() {
    let keys = [];
    var re = pathToRegexp('/first/:second', keys);
    console.log(re);
    console.log(keys);
    console.log(re.exec('/first'));
    console.log(re.exec('/first/ggg'));
  },

  // Parameters can be suffixed with an asterisk (*) to denote a zero or more parameter matches
  test4() {
    let kesy = [];
    var re = pathToRegexp('/:foo*')
    console.log(re);
    console.log(re.exec('/foo/route/ddd/'));
  },

  // Parameters can be suffixed with a plus sign (+) to denote a one or more parameter matches. 
  test5() {
    let kesy = [];
    var re = pathToRegexp('/:foo+')
    console.log(re);
    console.log(re.exec('/foo/route/ddd/'));
  },

  // All parameters can be provided a custom regexp, which overrides the default match ([^\/]+). 
  // For example, you can match digits in the path:
  test6() {
    let keys = [];
    var re = pathToRegexp('/icon-:foo(\\d+).png', keys);
    // keys = [{ name: 'foo', ... }]
    console.log(re);
    console.log(keys);
    console.log(re.exec('/icon-123.png'))
    //=> ['/icon-123.png', '123']
    console.log(re.exec('/icon-abc.png'))
  },

  test7() {
    let keys = [];
    var re = pathToRegexp('/:icon/(\\d+\\.png)', keys);
    // keys = [{ name: 'foo', ... }]
    console.log(re);
    console.log(keys);
    console.log(re.exec('/icon/123.png'));
    console.log(re.exec('/icon/abc.png'));
  },

  test8() {
    var keys = [];
    // var re = pathToRegexp('/api/:proxypath(.*)', keys)
    var re = pathToRegexp('/api/(.*)', keys)
    console.log(re);
    console.log(keys);
    console.log(re.exec('/api/route/gg?a=b'));
  },
  
  test9() {
    var keys = [];
    // var re = pathToRegexp('/api/:proxypath(.*)', keys)
    // var re = pathToRegexp('/api/:a(.)/./:b/:c+/:d/:e/icon-:foo(\\d+).png', keys)
    console.log('/api/:a(.)/:b/:c+/:d/:e/icon-:foo(\\d+).png');
    var re = pathToRegexp('/api/:a(.)/:b/:c+/:d/:e/icon-:foo(\\d+).png', keys)
    console.log(re);
    console.log(keys);
    console.log(re.exec('/api/a/b/c/d/e/icon-12.png'));

    // (?:
    //   \:(\w+)
    //   (?:
    //     \(
    //       ((?:\\.|[^\\()])+)
    //     \)
    //   )?
    //   |
    //   \(
    //     ((?:\\.|[^\\()])+)
    //   \)
    // )
    // ([+*?])?
  },

  test10() {
    var re = pathToRegexp('/:name/download/:filename/-rev/:rev');
    console.log(re.exec('/@paas\/koa-md-parser/download/koa-md-parser-0.10.6.tgz/-rev/12345'))
  },
  test11() {
    var re = pathToRegexp('/^\/(@[\w\-\.]+\/[\w\-\.]+)\/download\/(@[\w\-\.]+\/[\w\-\.]+)\/\-rev\/([\w\-\.]+)$/')
    console.log(re)
    console.log(re.exec('/@paas/koa-md-parser/download/@paas/koa-md-parser-0.10.6.tgz/-rev/12345'))
  },

  case12() {
    var keys = [];
    const str = '/with/\\cap[ture/:abc(\\d+):def([a-d])/:ghi/([abc])+/\\another';
    console.log(pathToRegexp.compile(str));
    const result = pathToRegexp(str, keys);
    console.log(keys);
    console.log(result);
    console.log(result.exec('/with/cap[ture/aa/1a/a/b/c/another'));
  }
}

var demo = new Demo();
// demo.test1();
demo.case12();
