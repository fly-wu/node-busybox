// show feather of RegExp

const assert = require('assert')

class Case {
  escapeRegexp(str) {
    if (typeof str !== 'string') {
      throw new TypeError('Expected a string');
    }
    return String(str).replace(/([.*+?=^!:${}()|[\]\/\\])/g, '\\$1');
  }

  // 初始化正则表达式的两种方式：//与new Regexp, 传入Regexp的字符串需要escape以下
  escapeUsage1() {
    const results = [];
    var target = 666;
    const r1 = /^\d{3}$/;
    results.push(r1.exec(target));
    const r2 = new RegExp('^\\d{3}$');
    results.push(r2.exec(target));
    const str = '^\\d{3}$';
    const r3 = new RegExp(str);
    results.push(r3.exec(target));
    console.log(results);
  }
  escapeUsage2() {
    // /^\\a$/.exec('\\a');
    // new RegExp('^\\\\a$').exec('\\a')
    const results = [];
    const target = '[ab]cd';
    const r1 = /^\[ab\]cd$/;
    results.push(r1.exec(target));
    const r2 = new RegExp('^\\[ab\\]cd$');
    results.push(r2.exec(target));
    const r3 = new RegExp('^\[ab\]cd$');
    results.push(r3.exec(target));
    return results;
  }
  // escapeUsage2() {
  //   const results = [];
  //   const target = '.666';
  //   const r1 = /^\.\d{3}$/;
  //   results.push(r1.exec(target));
  //   const r2 = new RegExp('^\.\\d{3}$');
  //   results.push(r2.exec(target));
  //   const str = '^\\.\\d{3}$';
  //   const r3 = new RegExp(str);
  //   results.push(r3.exec(target));
  //   console.log(results);
  // }
}

const obj = new Case();

describe('escapse character', function () {
  it('escapse2', function () {
    const results = obj.escapeUsage2();
    assert.strictEqual(results[0][0], results[1][0]);
    assert.strictEqual(results[2], null);
  })
})