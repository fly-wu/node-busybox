const axios = require('../lib/axios');

class AxiosHelper {
  constructor(instanceConfig) {
    this.runtime = this.getRuntime();
    this.instance = axios.create(Object.assign({
      baseURL: this.runtime === 'browser' ? location.origin : null,
      timeout: 15000
    }, instanceConfig));
    // this.interceptAxios(this.instance);
  }

  /**
   * @param method
   * @param path
   * @param params,
   * @param query,
   * @param data,
   * @param headers,
   * @returns request in the form of Promise
   */
  async requestAxiosResponse({method, path, params, query, data, headers}) {
    if (!path || !method) {
      throw new Error('参数不完整');
    }
    if (params) {
      Object.keys(params).forEach((key) => {
        // path = path.replace('{' + key + '}', encodeURIComponent(params[key]));
        path = path.replace('{' + key + '}', params[key]);
      });
    }
    const config = {
      method,
      url: path,
      params: query,
      headers,
    };
    if (['post', 'put', 'patch'].indexOf(method) > -1) {
      config['data'] = data;
    }
    return await this.instance.request(config);
  }

  async requestData({method, path, params, query, data, headers}) {
    const response = await this.requestAxiosResponse({method, path, params, query, data, headers});
    const resData = response.data;
    return resData;
  }

  getRuntime() {
    var adapter;
    // Only Node.JS has a process variable that is of [[Class]] process
    if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
      // For node use HTTP adapter
      adapter = 'node';
    } else if (typeof XMLHttpRequest !== 'undefined') {
      // For browsers use XHR adapter
      adapter = 'browser';
    }
    return adapter;
  }

  // NOTICE: not used
  interceptAxios(instance) {
    const paasError = err => Promise.reject(err);
    instance.interceptors.request.use(config => {
      // console.log('config');
      // console.log(config);
      return config;
    }, paasError);
    instance.interceptors.response.use(response => {
      // console.log('response');
      // console.log(response);
      return response;
    }, paasError);
  }

  // TODO: not used
  objectToQueryString (obj) {
    return Object.keys(obj).reduce((str, key, i) => {
      var delimiter, val;
      delimiter = (i === 0) ? '?' : '&';
      key = encodeURIComponent(key);
      val = encodeURIComponent(obj[key]);
      return [str, delimiter, key, '=', val].join('');
    }, '');
  }
}

module.exports = AxiosHelper;
