const path = require('path');
const busybox = require('busybox');

const modulePath = busybox.utils.node.getModulePath('webpack', __dirname);
if (!modulePath) {
  console.log('modulePath not found!');
  process.exit();
}
const webpack = require(modulePath);
// console.log(webpack);
var uglifyJsPlugin = webpack.optimize.UglifyJsPlugin;

function generateConfig(name) {
  var uglify = name.indexOf('min') > -1;
  var config = {
    entry: path.resolve(__dirname, 'index.js'),
    output: {
      path: path.resolve(__dirname, 'dist/'),
      filename: name + '.js',
      // sourceMapFilename: name + '.map',
      library: 'axios',
      libraryTarget: 'umd'
    },
    plugins: [
    ],
    module: {
      // rules: [{
      //   exclude(file) {
      //     // return /node_modules\/process/.test(file);
      //     // console.log(`exclude: ${file}`);
      //     // console.log(/node_modules\/process/.test(file));
      //     return /axios\/lib\/defaults\.js/.test(file);
      //   }
      // }]
      // noParse(file) {
      //   console.log(file);
      // }
    },
    externals: [(context, request, callback) => {
      // console.log(request);
      // if (/node_modules\/process/.test(request)) {
      //   return callback(null, 'process');
      // }
      // if (/XMLHttpRequest/.test(request)) {
      //   return callback(null, 'XMLHttpRequest');
      // }
      callback();
      // return callback(null, request);
    }]
    // node: {
    //   process: false
    // },
    // devtool: 'source-map'
  };

  // config.plugins = [
  //   new webpack.DefinePlugin({
  //     'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)
  //   })
  // ];
  // config.plugins.push(new webpack.IgnorePlugin(/process/));
  console.log(`uglify: ${uglify}`);
  console.log(webpack.optimize.UglifyJsPlugin);
  if (uglify) {
    config.plugins.push(
      new webpack.optimize.UglifyJsPlugin({
        compressor: {
          warnings: false
        }
      })
    );
  }

  console.log(config);
  return config;
}

function build() {
  // const target = ['axios', 'axios.min'];
  const target = ['axios.min'];
  // const target = ['axios.min'];
  return Promise.all(target.map((key) => {
    return new Promise((resolve, reject) => {
      const config = generateConfig(key);
      webpack(config, (err, stats) => {
        if (err) {
          reject(err);
        } else {
          resolve(stats);
        }
      });
    })
  }));
}

module.exports = build;

// console.log(process.argv);
if (process.argv[1].endsWith('webpack.build.js')) {
  build().then(v => {
    console.log(v);
  }).catch(err => {
    console.log(err);
  })
}
