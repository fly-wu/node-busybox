const assert = require('assert');

exports.withCallback = function (from, to, apiList) {
  apiList.filter(api => typeof from[api] === 'function').forEach(api => {
    to[api] = function() {
      const self = this;
      const args = [].slice.call(arguments);
      assert(args.length > 0);
      if (typeof args[args.length - 1] === 'function') {
        from[api].apply(self, args);
      } else {
        return new Promise((resolve, reject) => {
          from[api].apply(self, args.concat(function callback(err, value) {
            if (err) {
              reject(err);
              return;
            }
            if (arguments.length <= 2) {
              resolve(value);
            } else {
              resolve([].slice.call(arguments, 1))
            }
          }))
        });
      }
    }
  });
  Object.keys(from).forEach(function (name) {
    if (to[name]) return;
    to[name] = from[name];
  });
}